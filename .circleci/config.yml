version: 2.1

executors:
  node10:
    docker:
      # use latest node 10 on debian
      - image: circleci/node:10-stretch
    environment:
      NPM_CONFIG_PREFIX: ~/.npm-global

references:
  run_smoketests: &run_smoketests
    executor: node10
    steps:

commands:
  setup:
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}
      - run:
          name: install npm 6.13.6
          command: sudo npm -g install npm@6.13.6
      - run:
          name: Installing Dependencies
          command: npm ci
      - save_cache:
          paths:
            - node_modules
          key: v3-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}
      - run:
          name: prepare test git user
          command: git config --global user.email "circleci@project-helix.page" && git config --global user.name "CircleCi Build"

jobs:
  build:
    executor: node10
    steps:
      - setup
      - run:
          name: Lint
          command: npm run lint

  init_smoketests:
    executor: node10
    steps:
      - setup
      - run:
          name: Installing Helix CLI
          command: npm install @adobe/helix-cli@">=5" --save=false
      - run:
          name: Build Templates
          command: npx hlx build
      - run:
          name: Deploy to Adobe I/O Runtime
          command: npx hlx deploy --add test_$CIRCLE_BUILD_NUM | cat
      - run:
          name: Compute TEST_DOMAIN and TEST_SERVICE
          command: |
              modulo=$(expr $CIRCLE_BUILD_NUM % 3 + 1)
              name="TEST_DOMAIN_$modulo"
              TEST_DOMAIN=${!name}
              name="TEST_SERVICE_$modulo"
              TEST_SERVICE=${!name}
              mkdir -p env
              # "pass" the variable to the next steps...
              echo "export TEST_DOMAIN=$TEST_DOMAIN" >> env/TEST_DOMAIN
              echo "export TEST_SERVICE=$TEST_SERVICE" >> env/TEST_SERVICE
              cat env/TEST_DOMAIN >> $BASH_ENV
              cat env/TEST_SERVICE >> $BASH_ENV
              # debug logs
              echo "A TEST_DOMAIN has been computed - $TEST_DOMAIN"
              echo "A TEST_SERVICE has been computed - $TEST_SERVICE"
      - run:
          name: Publish to Fastly
          command: npx hlx publish --custom-vcl='vcl/extensions.vcl' --fastly-serviceid $TEST_SERVICE | cat

      - run: mkdir junit

      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project
            - .npm

  run_smoketests:
    executor: node10
    parameters:
        owner:
            type: string
            description: the owner of the git repo that hosts the "test:hlx.pge.smoketest" tests
        repo:
            type: string
            description: the name of the git repo that hosts the "test:hlx.pge.smoketest" tests
        branch:
            type: string
            default: master
            description: the branch of the git repo that hosts the "test:hlx.pge.smoketest" tests
        script:
            type: string
            default: test:hlx.pge.smoketest
            description: the name of the npm script to run
    steps:
      - attach_workspace:
          at: /home/circleci

      - run:
          name: Load environment variables
          command: |
            cat env/TEST_DOMAIN >> $BASH_ENV
            cat env/TEST_SERVICE >> $BASH_ENV

      - run:
          name: Cloning << parameters.owner >>/<< parameters.repo >>
          command: git clone --single-branch --branch << parameters.branch >> --depth 1 https://github.com/<< parameters.owner >>/<< parameters.repo >>

      - run:
          name: Installing << parameters.repo >>
          command: npm install
          working_directory: << parameters.repo >>

      - run:
          name: Run the smoke tests for repo << parameters.repo >>
          command: env MOCHA_FILE='/home/circleci/project/junit/test-results-<< parameters.owner >>-<< parameters.repo >>.xml' npm run << parameters.script >> -- --reporter mocha-junit-reporter
          working_directory: << parameters.repo >>

      - store_test_results:
          path: junit

      - store_artifacts:
          path: junit

      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project/junit

  run_generic_smoketests:
    executor: node10
    parameters:
        owner:
            type: string
            description: the owner of the git repo to run the smoke tests against
        repo:
            type: string
            description: the name of the git repo to run the smoke tests against
        branch:
            type: string
            default: master
            description: the branch of the git repo to run the smoke tests against
        index:
            type: string
            default: index.html
            description: the index page to be tested
    steps:
      - attach_workspace:
          at: /home/circleci

      - run:
          name: Load environment variables
          command: |
            cat env/TEST_DOMAIN >> $BASH_ENV
            cat env/TEST_SERVICE >> $BASH_ENV

      - run:
          name: Run the smoke tests for << parameters.owner >>/<< parameters.repo >>
          command: env MOCHA_FILE='/home/circleci/project/junit/test-results-<< parameters.owner >>-<< parameters.repo >>.xml' TEST_OWNER=<< parameters.owner >> TEST_REPO=<< parameters.repo >> TEST_BRANCH=<< parameters.branch >> TEST_INDEX=<< parameters.index >> npm run test:hlx.pge.generic.smoketester  -- --reporter mocha-junit-reporter

      - store_test_results:
          path: junit

      - store_artifacts:
          path: junit

      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project/junit

  finalize_smoketests:
    executor: node10
    steps:
      - attach_workspace:
          at: /home/circleci

      # group all junit test results in the finalize step
      - store_test_results:
          path: junit

      - store_artifacts:
          path: junit

  publish:
    executor: node10
    steps:
      - setup

      - run:
          name: Installing Helix CLI
          command: npm install @adobe/helix-cli@">=5" --save=false

      - run:
          name: Build Templates
          command: npx hlx build

      - run:
          name: Reset Working Copy
          command: git status; git checkout -- . ; git pull

      - run:
          name: Deploy to Adobe I/O Runtime
          command: npx hlx deploy | cat

      - run:
          name: Publish to Fastly
          command: npx hlx publish --custom-vcl='vcl/extensions.vcl' | cat

      - add_ssh_keys
      - run:
          name: Commit helix config to master
          command: |
            git checkout master
            git pull --tags origin
            git commit -am "ðŸš¢ enshrining config post-deploy [ci skip]"

      - run:
          name: Tag known good deploy
          command: |
            git tag `date "+known-good-%Y%m%d%H%M%S"`
            git push --tags origin master

      - run:
          name: Semantic Release
          command: npm run semantic-release

workflows:
  version: 2
  build:
    jobs:
      - build
      - init_smoketests:
          requires:
            - build
      - run_smoketests:
          name: adobe/helix-pages#master
          owner: adobe
          repo: helix-pages
          branch: master
          requires:
            - init_smoketests
      - run_smoketests:
          name: adobe/helix-example-basic#test-code
          owner: adobe
          repo: helix-example-basic
          branch: test-code
          script: test:smoke
          requires:
            - init_smoketests
      - run_generic_smoketests:
          name: adobe/ferrumjsorg
          owner: adobe
          repo: ferrumjsorg
          requires:
            - init_smoketests
      - finalize_smoketests:
          requires:
            - adobe/helix-pages#master
            - adobe/helix-example-basic#test-code
            - adobe/ferrumjsorg
      - publish:
          requires:
            - finalize_smoketests
          filters:
            branches:
              only: master

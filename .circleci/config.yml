version: 2.1

executors:
  node12:
    docker:
      # use latest node 12 on debian
      - image: circleci/node:12
    environment:
      NPM_CONFIG_PREFIX: ~/.npm-global
      NODE_ENV: development # Only needed if puppeteer is in `devDependencies`

parameters:
  smoke_tests_only:
    type: boolean
    default: false
    description: execute only the smoke tests
  publish_ci_version:
    type: string
    default: ""
    description: the helix-publish ci version to use
  version_lock:
    type: string
    default: ""
    description: the version lock string

orbs:
  puppeteer: threetreeslight/puppeteer@0.1.2

references:
  run_smoketests: &run_smoketests
    executor: node12
    steps:

commands:
  setup:
    steps:
      - checkout
      - restore_cache:
          keys:
            - v5-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}
      - run:
          name: install npm
          command: sudo npm -g install npm
      - run:
          name: Installing Dependencies
          command: npm ci
      - save_cache:
          paths:
            - node_modules
          key: v5-dependencies-{{ arch }}-{{ checksum "package-lock.json" }}
      - run:
          name: prepare test git user
          command: git config --global user.email "circleci@project-helix.page" && git config --global user.name "CircleCi Build"

jobs:
  build:
    executor: node12
    steps:
      - setup
      - run:
          name: Lint
          command: npm run lint
      - run: mkdir junit
      - puppeteer/install
      - run:
          name: Unit tests
          command: npx mocha --exit --reporter mocha-junit-reporter test/unit/*.test.js
          environment:
              MOCHA_FILE: junit/test-results.xml
          when: always
      - store_test_results:
          path: junit
      - store_artifacts:
          path: junit


  init_smoketests:
    executor: node12
    steps:
      - setup
      - run:
          name: Installing Helix CLI
          command: npm install @adobe/helix-cli@">=5" --save=false
      - run:
          name: Build Templates
          command: npx hlx build
      - run:
          name: Deploy to Adobe I/O Runtime
          command: npx hlx deploy --wsk-action-memory 512 --add default --default ALGOLIA_API_KEY $ALGOLIA_API_KEY ALGOLIA_APP_ID $ALGOLIA_APP_ID AZURE_SEARCH_API_KEY $AZURE_SEARCH_API_KEY AZURE_SEARCH_SERVICE_NAME $AZURE_SEARCH_SERVICE_NAME CORALOGIX_API_KEY $CORALOGIX_API_KEY CORALOGIX_LOG_LEVEL $CORALOGIX_LOG_LEVEL EPSAGON_TOKEN $EPSAGON_TOKEN | cat
      - run:
          name: Setup branch in helix-config.yaml

          # replace "master" by the branch name in helix-config
          command: |
            sed -i -e "s/#master/#$CIRCLE_BRANCH/" helix-config.yaml
      - run:
          name: Compute TEST_DOMAIN and TEST_SERVICE and TEST_VERSION_LOCK

          command: |
              modulo=$(expr << pipeline.number >> % 7 + 1)
              name="TEST_DOMAIN_$modulo"
              TEST_DOMAIN=${!name}
              name="TEST_SERVICE_$modulo"
              TEST_SERVICE=${!name}
              mkdir -p env
              # "pass" the variable to the next steps...
              echo "export TEST_DOMAIN=$TEST_DOMAIN" >> env/TEST_DOMAIN
              echo "export TEST_SERVICE=$TEST_SERVICE" >> env/TEST_SERVICE
              echo "export TEST_VERSION_LOCK=<< pipeline.parameters.version_lock >>" >> env/TEST_VERSION_LOCK

              cat env/TEST_DOMAIN >> $BASH_ENV
              cat env/TEST_SERVICE >> $BASH_ENV
              cat env/TEST_VERSION_LOCK >> $BASH_ENV
              # debug logs
              echo "A TEST_DOMAIN has been computed - hlx-$modulo"
              echo "Using version lock: << pipeline.parameters.version_lock >>"
      - run:
          name: Publish to Fastly
          command: |
            if [[ $CIRCLE_BRANCH == *"-publish-ci"* ]]; then
                echo "Using CI Publish"
                npx hlx publish --custom-vcl='vcl/extensions.vcl' --fastly-serviceid $TEST_SERVICE --api-publish  https://adobeioruntime.net/api/v1/web/helix/helix-services/publish@ci | cat
            else
              if [[ ! -z "<< pipeline.parameters.publish_ci_version >>" ]]; then
                echo "Using CI Publish provided version: << pipeline.parameters.publish_ci_version >>"
                npx hlx publish --custom-vcl='vcl/extensions.vcl' --fastly-serviceid $TEST_SERVICE --api-publish  https://adobeioruntime.net/api/v1/web/helix/helix-services/publish@<< pipeline.parameters.publish_ci_version >> | cat
              else
                echo "Using regular Publish"
                npx hlx publish --custom-vcl='vcl/extensions.vcl' --fastly-serviceid $TEST_SERVICE | cat
              fi
            fi


      - run: mkdir junit

      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project
            - .npm

  run_smoketests:
    executor: node12
    parameters:
        owner:
            type: string
            description: the owner of the git repo that hosts the "test:hlx.pge.smoketest" tests
        repo:
            type: string
            description: the name of the git repo that hosts the "test:hlx.pge.smoketest" tests
        branch:
            type: string
            default: master
            description: the branch of the git repo that hosts the "test:hlx.pge.smoketest" tests
        script:
            type: string
            default: test:hlx.pge.smoketest
            description: the name of the npm script to run
    steps:
      - attach_workspace:
          at: /home/circleci

      - run:
          name: Load environment variables
          command: |
            cat env/TEST_DOMAIN >> $BASH_ENV
            cat env/TEST_SERVICE >> $BASH_ENV
            cat env/TEST_VERSION_LOCK >> $BASH_ENV

      - run:
          name: Cloning << parameters.owner >>/<< parameters.repo >>
          command: git clone --single-branch --branch << parameters.branch >> --depth 1 https://github.com/<< parameters.owner >>/<< parameters.repo >>

      - run:
          name: Installing << parameters.repo >>
          command: npm install
          working_directory: << parameters.repo >>

      # required by some smoketests (no way to install it via npm only)
      - puppeteer/install

      - run:
          name: Run the smoke tests for repo << parameters.repo >>
          command: env MOCHA_FILE='/home/circleci/project/junit/test-results-<< parameters.owner >>-<< parameters.repo >>.xml' npm run << parameters.script >> -- --reporter mocha-junit-reporter
          working_directory: << parameters.repo >>

      - store_test_results:
          path: junit

      - store_artifacts:
          path: junit

      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project/junit

  run_generic_smoketests:
    executor: node12
    parameters:
        owner:
            type: string
            description: the owner of the git repo to run the smoke tests against
        repo:
            type: string
            description: the name of the git repo to run the smoke tests against
        branch:
            type: string
            default: master
            description: the branch of the git repo to run the smoke tests against
        index:
            type: string
            default: index.html
            description: the index page to be tested
    steps:
      - attach_workspace:
          at: /home/circleci

      - run:
          name: Load environment variables
          command: |
            cat env/TEST_DOMAIN >> $BASH_ENV
            cat env/TEST_SERVICE >> $BASH_ENV
            cat env/TEST_VERSION_LOCK >> $BASH_ENV

      - run:
          name: Run the smoke tests for << parameters.owner >>/<< parameters.repo >>
          command: env MOCHA_FILE='/home/circleci/project/junit/test-results-<< parameters.owner >>-<< parameters.repo >>.xml' TEST_OWNER=<< parameters.owner >> TEST_REPO=<< parameters.repo >> TEST_BRANCH=<< parameters.branch >> TEST_INDEX=<< parameters.index >> npm run test:hlx.pge.generic.smoketester  -- --reporter mocha-junit-reporter

      - store_test_results:
          path: junit

      - store_artifacts:
          path: junit

      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project/junit

  finalize_smoketests:
    executor: node12
    steps:
      - attach_workspace:
          at: /home/circleci

      # group all junit test results in the finalize step
      - store_test_results:
          path: junit

      - store_artifacts:
          path: junit

  publish:
    executor: node12
    steps:
      - setup

      - run:
          name: Installing Helix CLI
          command: npm install @adobe/helix-cli@">=5" --save=false

      - run:
          name: Reset Working Copy
          command: git status; git checkout -- . ; git pull

      - run:
          name: Prepare packackge secrets
          command: |
            echo "ALGOLIA_API_KEY=$ALGOLIA_API_KEY" > .pages-package.env
            echo "ALGOLIA_APP_ID=$ALGOLIA_APP_ID" >> .pages-package.env
            echo "AZURE_SEARCH_API_KEY=$AZURE_SEARCH_API_KEY" >> .pages-package.env
            echo "AZURE_SEARCH_SERVICE_NAME=$AZURE_SEARCH_SERVICE_NAME" >> .pages-package.env
            echo "CORALOGIX_API_KEY=$CORALOGIX_API_KEY" >> .pages-package.env
            echo "CORALOGIX_LOG_LEVEL=$CORALOGIX_LOG_LEVEL" >> .pages-package.env
            echo "EPSAGON_TOKEN=$EPSAGON_TOKEN" >> .pages-package.env
            echo "HTTP_TIMEOUT_EXTERNAL=30000" >> .pages-package.env

      - run:
          name: Deploy
          command: WSK_AUTH=$HLX_WSK_AUTH npm run deploy

      - run:
          name: Publish to Fastly
          command: npx hlx publish --custom-vcl='vcl/extensions.vcl' | cat

      - add_ssh_keys
      - run:
          name: Commit helix config to master
          command: |
            git checkout master
            git pull --tags origin
            git commit -am "ðŸš¢ enshrining config post-deploy [ci skip]"

      - run:
          name: Tag known good deploy
          command: |
            git tag `date "+known-good-%Y%m%d%H%M%S"`
            git push --tags origin master

      - run:
          name: Semantic Release
          command: npm run semantic-release

  run_diff_tests:
    executor: node12
    steps:
      - attach_workspace:
          at: /home/circleci

      - run:
          name: Load environment variables
          command: |
            cat env/TEST_DOMAIN >> $BASH_ENV
            cat env/TEST_SERVICE >> $BASH_ENV
            cat env/TEST_VERSION_LOCK >> $BASH_ENV

      - run:
          name: Run Helix Page Diff tests
          command: npm run test:pages -- --reporter mocha-junit-reporter
          environment:
              MOCHA_FILE: junit/tests-results-run_diff_tests.xml
          when: always

      - store_test_results:
          path: junit

      - store_artifacts:
          path: junit

      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project/junit

workflows:
  version: 2
  build:
    unless: << pipeline.parameters.smoke_tests_only >>
    jobs:
      - build
#      - init_smoketests:
#          requires:
#            - build
#      - run_smoketests:
#          name: adobe/helix-pages
#          owner: adobe
#          repo: helix-pages
#          branch: $CIRCLE_BRANCH
#          requires:
#            - init_smoketests
#      - run_smoketests:
#          name: adobe/helix-example-basic#test-code
#          owner: adobe
#          repo: helix-example-basic
#          branch: test-code
#          script: test:smoke
#          requires:
#            - init_smoketests
#      - run_smoketests:
#          name: adobe/theblog-tests
#          owner: adobe
#          repo: theblog-tests
#          branch: master
#          script: test:smoke
#          requires:
#            - init_smoketests
#      - run_generic_smoketests:
#          name: adobe/ferrumjsorg
#          owner: adobe
#          repo: ferrumjsorg
#          requires:
#            - init_smoketests
#      - run_diff_tests:
#          requires:
#            - init_smoketests
#      - finalize_smoketests:
#          requires:
#            - adobe/helix-pages
#            - adobe/helix-example-basic#test-code
#            - adobe/ferrumjsorg
#            - adobe/theblog-tests
#            - run_diff_tests
      - publish:
          context: Project Helix
          requires:
            - build
#            - finalize_smoketests
          filters:
            branches:
              only: master
  tests:
    when: << pipeline.parameters.smoke_tests_only >>
    jobs:
    - build
    - init_smoketests:
        requires:
            - build
    - run_smoketests:
        name: adobe/helix-pages
        owner: adobe
        repo: helix-pages
        branch: $CIRCLE_BRANCH
        requires:
            - init_smoketests
    - run_smoketests:
        name: adobe/helix-example-basic#test-code
        owner: adobe
        repo: helix-example-basic
        branch: test-code
        script: test:smoke
        requires:
            - init_smoketests
    - run_smoketests:
        name: adobe/theblog-tests
        owner: adobe
        repo: theblog-tests
        branch: master
        script: test:smoke
        requires:
            - init_smoketests
    - run_generic_smoketests:
        name: adobe/ferrumjsorg
        owner: adobe
        repo: ferrumjsorg
        requires:
            - init_smoketests
    - run_diff_tests:
        requires:
            - init_smoketests
    - finalize_smoketests:
        requires:
            - adobe/helix-pages
            - adobe/helix-example-basic#test-code
            - adobe/ferrumjsorg
            - adobe/theblog-tests
            - run_diff_tests

